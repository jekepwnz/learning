Архитектура. 
Client отправляет запрос, сервер принимает запорос и отвечает на него. 
Сервер может быть клиентом в другой ситуации, когда что-то спрашивает у других серверов.
Много серверов образуют дата-центр. 
Сервером может быть и личный компьютер, телефон, только в том случае, если на этом сервере запустить программу, которая будет принимать запросы и отправлять ответ.
Программы эти так и называются http-server. Программа работает по протоколу http, соответственно принимает http запрос, отдаёт http ответ.
Запросы должны быть отправлены http методом.
Клиентом может быть любая железяка, телефон, пк. Десктопное приложение общается с внешним сервером и является клиентом. 
На вебе: браузер отправляет запросы на серваки, а серваки присылают нам клиенты - веб интерфейс, где мы всё видим, читаем, пользуемся.
Endpoint - Точка касания, куда полетить http-request.
API - Application Programming Interface - интерфейс, с помощью которого мы можем "общаться" с сервером.
https://example.com/loginpage - один из эндпоинтов 
когда мы нажимаем в браузере loginpage летит https request (req) запрос на сервер. 
Мы пустучались в loginpage endpoint, сервак знает, что нужно делать. сервак пошёл на файловую систему, достал нужные картинки
забрал текста, поднял html файлы, css. Каритнка кодируется и передаётся в base64.
Серверной частью занимаются backend разработчики.
Приходит это на клиент и преобразуется обратно в картинку. 
Response - ответ сервера клиенту. (resp)
Ядро браузера распознает java-scripts, парсит html. Прочитывает их и понимает что нужно делать. 
На клиент прилетает пакет ответа. html это скелет, где написано что будет картинка, текст, кнопка итд. 
CSS - это "мясо": какого цвета будет кнопка, заливка, стиль текста. 
вся механика действия этого "организма" - javascript. 
Вышеперечисленным занимаются frontend разработчики.
Когда мы ввели данные в формы login/password и нажали на sign in, отправляется http запрос в другой endpoint,к примеру http://example.com/login
методом POST, у этого запроса есть BODY, в котором лежат login и password. лежать они будут в виде json.
JS-скрипт положит логин и пароль в бади запроса в виде json. также frontend разработчик указывает на какой endpoint полетит request.
Backend разработчик написали логику по этому эндпоинту, что когда прилетает запрос, надо пойти в бади запроса, достать оттуда логин и пароль.
Сервер берёт логин и идёт в базу. Сервер спрашивает у базы SQL запросом, есть ли такой пользователь, если база отвечает, что есть, 
мы его запоминаем, мы его идентифицировали по логину.
След запрос - давай сделаем аутентификацию. Спрашиваем такой ли у этого пользователя пароль. 
В итоге пользователь идентифицирован и аутентифицирован, его можно авторизовать. Сервер запрашивает из базы личную инфу, на которую есть права у данного пользователя,
база это всё ему возвращает, сервер это собирает и пакует информацию, как это будет выглядеть, отдаёт клиенту личную страницу пользователя.
Нажатие любой кнопки на клиенте, это еще не значит отправку запроса. Возможно просто сработает Java скрипт.
В многоуровневой архитектуре сервер отправляет запросы на другой сервер. 

